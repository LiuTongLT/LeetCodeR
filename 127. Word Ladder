class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        //The case that the wordList does not contain the endWord, return 0
        unordered_set<string> dic(wordList.begin(),wordList.end());
        if(!dic.count(endWord)) 
            return 0;
        
        //When the wordList contains the endWord, find the shortest way
        int step = 0;
        int length = endWord.length();
        
        unordered_set<string> q1{beginWord};
        unordered_set<string> q2{endWord};
        
        while(!q1.empty() && !q2.empty())
        {
            step++;
            
            //Bidirectional BFS, always operate on the smaller one
            if(q1.size()>q2.size())
            {
                q1.swap(q2);
            }
            
            unordered_set<string> q;
            
            for(string s: q1)
            {
                for(int i = 0; i<length; i++)
                {
                    char ch = s[i];
                    for(char c = 'a'; c<='z'; c++)
                    {
                        s[i] = c;
                        if(q2.count(s)) 
                            return step+1;
                        if(dic.count(s))
                        {
                            dic.erase(s);
                            q.insert(s);
                        }
                    }
                    s[i] = ch;
                }
            }
            q1.swap(q);
        }
      return 0;
    }
};
