// Very slow answer
class Solution {
public:
    string longestPalindrome(string s) {
        string result("");
        int length = s.length();
        for(int i = length; i>0; i--){
            string sub;
            for(int j = 0;j<i ;j++){
                sub = s.substr(j,i-j);
                if(isPalindrome(sub) && sub.length()>result.length()){
                    result = sub;
                    break;
                } 
            }
            if(result.length()==i){
                break;
            }
        }
        return result;
    }
private:
    bool isPalindrome(string aSub){
        string bSub(aSub);
        std::reverse(bSub.begin(),bSub.end());
        return bSub==aSub;
    }
};

//Fast answer

class Solution {
public:
    std::string longestPalindrome(std::string s) {
        if (s.size() < 2)
            return s;
        int len = s.size(), max_left = 0, max_len = 1, left, right;
        for (int start = 0; start < len && len - start > max_len / 2;) {
            left = right = start;
            //
            while (right < len - 1 && s[right + 1] == s[right])
                ++right;
            start = right + 1;
            
            while (right < len - 1 && left > 0 && s[right + 1] == s[left - 1]) {
                ++right;
                --left;
            }
            if (max_len < right - left + 1) {
                max_left = left;
                max_len = right - left + 1;
            }
        }
        return s.substr(max_left, max_len);
    }
};
